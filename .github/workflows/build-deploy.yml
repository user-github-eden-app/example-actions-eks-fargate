# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy to Amazon EKS using the yaml in `manifests` and Kustomize,
# on every push to the master branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an EKS cluster.
#    For example: `eksctl create cluster`
# 2. Create an ECR repository to store your images.
#    For example:
#      `aws ecr create-repository --repository-name example-eks --region us-east-2`.
#      Replace the value of `ECR_REPOSITORY` in the workflow below with your 
#      repository's name if you use something other than `example-eks`.
# 3. Replace the value of `AWS_REGION` and `EKS_CLUSTER_NAME` in the workflow below
#    with the appropriate values.
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID`
#    and `AWS_SECRET_ACCESS_KEY`.

on:
  push:
    branches:
      - master

name: Deploy to Amazon EKS

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      EKS_CLUSTER_NAME: eden-app-backend-cluster
      AWS_SERVICE_ROLE: ${{ secrets.AWS_SERVICE_ROLE }}

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup kubeconfig
      id: setup-kubeconfig
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $AWS_SERVICE_ROLE

    - name: Deploy k8s yaml
      id: deploy-k8s-yaml
      run: |
        kubectl get services -o wide
